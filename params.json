{"name":"CoffeeScript 编码风格指南","tagline":"CoffeeScript 最佳实践和编码惯例","body":"# CoffeeScript 编码风格指南\r\n\r\n这份指南阐述了一些 [CoffeeScript][coffeescript] 的最佳实践和编码惯例。\r\n\r\n这份指南是社群驱动的，非常鼓励大家来贡献内容。\r\n\r\n请注意这还是一份正在完善的指南：仍有很多地方可以改进，有些已制定的准则也不一定是社区惯用的（基于此，在适当的情况下，这些有待斟酌的准则将有可能被修改或删除。）\r\n\r\n## 灵感\r\n\r\n本指南中的很多细节受到了几份现有的风格指南和其他资源的启发。特别是：\r\n\r\n- [PEP-8][pep8]: Style Guide for Python Code\r\n- Bozhidar Batsov's [Ruby Style Guide][ruby-style-guide]\r\n- [Google's JavaScript Style Guide][google-js-styleguide]\r\n- [Common CoffeeScript Idioms][common-coffeescript-idioms]\r\n- Thomas Reynolds' [CoffeeScript-specific Style Guide][coffeescript-specific-style-guide]\r\n- Jeremy Ashkenas' [code review][spine-js-code-review] of [Spine][spine-js]\r\n- The [CoffeeScript FAQ][coffeescript-faq]\r\n\r\n## 目录\r\n\r\n* [CoffeeScript 风格指南](#guide)\r\n    * [代码布局（Code Layout）](#code_layout)\r\n        * [Tab 还是 空格？（Tabs or Spaces?）](#tabs_or_spaces)\r\n        * [最大行宽（Maximum Line Length）](#maximum_line_length)\r\n        * [空行（Blank Lines）](#blank_lines)\r\n        * [结尾空白（Trailing Whitespace）](#trailing_whitespace)\r\n        * [可选的逗号（Optional Commas）](#optional_commas)\r\n        * [编码（Encoding）](#encoding)\r\n    * [模块导入（Module Imports）](#module_imports)\r\n    * [表达式和语句中的空白（Whitespace in Expressions and Statements）](#whitespace)\r\n    * [注释（Comments）](#comments)\r\n        * [块注释（Block Comments）](#block_comments)\r\n        * [行内注释（Inline Comments）](#inline_comments)\r\n    * [命名规范（Naming Conventions）](#naming_conventions)\r\n    * [函数（Functions）](#functions)\r\n    * [字符串（Strings）](#strings)\r\n    * [条件判断（Conditionals）](#conditionals)\r\n    * [循环和列表解析（Looping and Comprehensions）](#looping_and_comprehensions)\r\n    * [扩展本地对象（Extending Native Objects）](#extending_native_objects)\r\n    * [异常（Exceptions）](#exceptions)\r\n    * [注解（Annotations）](#annotations)\r\n    * [其他（Miscellaneous）](#miscellaneous)\r\n\r\n<a name=\"code_layout\"/>\r\n## 代码布局（Code Layout）\r\n\r\n<a name=\"tabs_or_spaces\"/>\r\n### Tab 还是 空格？（Tabs or Spaces?）\r\n\r\n只用 **空格**，每级缩进均为 **2 个空格**。切勿混用 Tab 和空格。\r\n\r\n<a name=\"maximum_line_length\"/>\r\n### 最大行宽（Maximum Line Length）\r\n\r\n限制每行最多 79 个字符。\r\n\r\n<a name=\"blank_lines\"/>\r\n### 空行（Blank Lines）\r\n\r\n顶级函数和类的定义用一个空行分开。\r\n\r\n类内部的函数定义也用一个空行分开。\r\n\r\n对于每个函数体内，只在为了提高可读性的情况下才使用一个空行（例如：为了达到划分逻辑的目的）。\r\n\r\n<a name=\"trailing_whitespace\"/>\r\n### 结尾空白（Trailing Whitespace）\r\n\r\n不要在任何一行保留行尾空白。\r\n\r\n<a name=\"optional_commas\"/>\r\n### 可选的逗号（Optional Commas）\r\n\r\n当对象（或数组）的属性（或元素）作为单独一行列出时，避免在换行符前使用逗号。如下：\r\n\r\n```coffeescript\r\n# 好\r\nfoo = [\r\n  'some'\r\n  'string'\r\n  'values'\r\n]\r\nbar:\r\n  label: 'test'\r\n  value: 87\r\n\r\n# 差\r\nfoo = [\r\n  'some',\r\n  'string',\r\n  'values'\r\n]\r\nbar:\r\n  label: 'test',\r\n  value: 87\r\n```\r\n\r\n<a name=\"encoding\"/>\r\n### 编码（Encoding）\r\n\r\nUTF-8 是首选的源文件编码。\r\n\r\n<a name=\"module_imports\"/>\r\n## 模块导入（Module Imports）\r\n\r\n如果需要导入模块 (CommonJS 模块，AMD，等等.), `require` 语句应该单独作为一行。如下：\r\n\r\n```coffeescript\r\nrequire 'lib/setup'\r\nBackbone = require 'backbone'\r\n```\r\n\r\n这些语句应该按以下顺序去分组：\r\n\r\n1. 标准库的导入 _（如果标准库存在）_\r\n2. 第三方库的导入\r\n3. 本地导入 _（导入这个应用程序的或库的具体依赖）_\r\n\r\n<a name=\"whitespace\"/>\r\n## 表达式和语句中的空白（Whitespace in Expressions and Statements）\r\n\r\n下列情况应该避免多余的空格：\r\n\r\n- 紧贴着圆括号、方括号和大括号内部\r\n\r\n    ```coffeescript\r\n       ($ 'body') # 好\r\n       ( $ 'body' ) # 差\r\n    ```\r\n\r\n- 紧贴在逗号前\r\n\r\n    ```coffeescript\r\n       console.log x, y # 好\r\n       console.log x , y # 差\r\n    ```\r\n\r\n额外建议：\r\n\r\n- 在下列二元操作符的左右两边都保留 **一个空格**\r\n\r\n    - 赋值运算符: `=`\r\n\r\n        - _注意这同样适用于函数定义中的默认参数_\r\n\r\n           ```coffeescript\r\n           test: (param = null) -> # 好\r\n           test: (param=null) -> # 差\r\n           ```\r\n\r\n    - 自增运算符: `+=`, `-=`, 等等。\r\n    - 比较运算符: `==`, `<`, `>`, `<=`, `>=`, `unless`, 等等。\r\n    - 算术运算符: `+`, `-`, `*`, `/`, 等等。\r\n\r\n    - _（这些操作符两边的空格不要多于一个）_\r\n\r\n        ```coffeescript\r\n           # 好\r\n           x = 1\r\n           y = 1\r\n           fooBar = 3\r\n\r\n           # 差\r\n           x      = 1\r\n           y      = 1\r\n           fooBar = 3\r\n        ```\r\n\r\n<a name=\"comments\"/>\r\n## 注释（Comments）\r\n\r\n如果你修改了一段已有注释说明的代码，则也要更新它对应的注释。（理想状态是，重构这段代码直到它不需要注释说明，然后再把之前的注释全删掉。）\r\n\r\n注释的首字母要大写，除非第一个单词是以小写字母开头的标识符。\r\n\r\n如果注释很短，可以省略末尾的句号。\r\n\r\n<a name=\"block_comments\"/>\r\n### 块注释（Block Comments）\r\n\r\n注释块通常应用于尾随其后的一段代码。\r\n\r\n每一行注释都以 `#` 加一个空格开头，而且和被注释的代码有相同的缩进层次。\r\n\r\n注释块内的段落以仅含单个 `#` 的行分割。\r\n\r\n```coffeescript\r\n  # 这是一个块注释。请注意假如这是一段块注释，\r\n  # 则它描述的就应该是接下来的这段代码。\r\n  #\r\n  # 这是块注释的第二段。\r\n  # 请注意这段是由上一行带有 # 号的空行分开的。（P.S. 最好用英文写注释）\r\n\r\n  init()\r\n  start()\r\n  stop()\r\n```\r\n\r\n<a name=\"inline_comments\"/>\r\n### 行内注释（Inline Comments）\r\n\r\n行内注释紧贴在被描述的代码的上一行，如果行内注释足够短，则可以处在同一行行尾（由一个空格隔开）。\r\n\r\n所有行内注释都以 `#` 加一个空格开头。\r\n\r\n应该限制行内注释的使用，因为它们的存在通常是一个代码异味的标志。\r\n\r\n不要给显而易见的情况作行内注释：\r\n\r\n```coffeescript\r\n  # 差\r\n  x = x + 1 # x 自增\r\n```\r\n\r\n然而，行内注释在某些情况下是有用的：\r\n\r\n```coffeescript\r\n  # 好\r\n  x = x + 1 # 边界补足\r\n```\r\n\r\n<a name=\"naming_conventions\"/>\r\n## 命名规范（Naming Conventions）\r\n\r\n使用 `小驼峰命名法` （第一个词的首字母小写，后面每个词的首字母大写）来命名所有的变量、方法和对象属性。\r\n\r\n使用 `大驼峰命名法` （第一个词的首字母，以及后面每个词的首字母都大写）来命名所有的类 _（在[其他类似的命名法][camel-case-variations]中，这种风格通常也被称为 `帕斯卡命名法（PascalCase）`、 `大写驼峰命名法（CamelCaps）` 或 `首字母大写命名法（CapWords）`。）_\r\n\r\n_（CoffeeScript **官方**  约定是用驼峰命名法，因为这可以简化与 JavaScript 的相互转化，想了解更多，请看[这里][coffeescript-issue-425].)_\r\n\r\n对于常量，单词全部大写，用下划线隔开即可：\r\n\r\n```coffeescript\r\nCONSTANT_LIKE_THIS\r\n```\r\n\r\n私有函数和私有变量都应该在前面加一个下划线：\r\n\r\n```coffeescript\r\n_privateMethod: ->\r\n```\r\n\r\n<a name=\"functions\"/>\r\n## 函数（Functions）\r\n\r\n_（以下这些准则同样适用于类中的方法。）_\r\n\r\n当声明一个带参函数时，应在参数列表的右圆括号后空出一个空格：\r\n\r\n```coffeescript\r\nfoo = (arg1, arg2) -> # 好\r\nfoo = (arg1, arg2)-> # 差\r\n```\r\n\r\n无参函数不要用圆括号：\r\n\r\n```coffeescript\r\nbar = -> # 好\r\nbar = () -> # 差\r\n```\r\n\r\n当函数链式调用，却在一行放不下时，则把每个函数调用都另起一行，且都缩进一级（即在 `.` 前加两个空格）。\r\n\r\n```coffeescript\r\n[1..3]\r\n  .map((x) -> x * x)\r\n  .concat([10..12])\r\n  .filter((x) -> x < 11)\r\n  .reduce((x, y) -> x + y)\r\n```\r\n\r\n当调用函数时，我们应该为了提高可读性而去掉圆括号。请记住，「可读性」是我们主观臆断的。只有类似下面几个例子的情况才被社区认为是最佳的：\r\n\r\n```coffeescript\r\nbaz 12\r\n\r\nbrush.ellipse x: 10, y: 20 # 大括号在适当的时候也可以去掉\r\n\r\nfoo(4).bar(8)\r\n\r\nobj.value(10, 20) / obj.value(20, 10)\r\n\r\nprint inspect value\r\n\r\nnew Tag(new Value(a, b), new Arg(c))\r\n```\r\n\r\n有时候你会发现圆括号用来包裹的是函数体（而不是函数的参数）。请看下面的例子（以下简称为「函数体风格」）：\r\n\r\n```coffeescript\r\n($ '#selektor').addClass 'klass'\r\n\r\n(foo 4).bar 8\r\n```\r\n\r\n这段代码会编译为：\r\n\r\n```coffeescript\r\n$('#selektor').addClass 'klass'\r\n\r\nfoo(4).bar 8\r\n```\r\n\r\n一些习惯链式调用的人会巧用「函数体风格」进行单独初始化：\r\n\r\n```coffeescript\r\n($ '#selektor').addClass('klass').hide() # 单独初始化调用\r\n(($ '#selektor').addClass 'klass').hide() # 全部调用\r\n```\r\n\r\n「函数体风格」并不得到推荐。但是， **当它适应一些特殊的项目需求时，还是得用它。**\r\n\r\n<a name=\"strings\"/>\r\n## 字符串（Strings）\r\n\r\n用字符串插值代替字符串连接符：\r\n\r\n```coffeescript\r\n\"this is an #{adjective} string\" # 好\r\n\"this is an \" + adjective + \" string\" # 差\r\n```\r\n\r\n最好用单引号 (`''`) 而不是双引号 (`\"\"`) 。除非是插入到另一段现有的字符串中（类似字符串插值）。\r\n\r\n<a name=\"conditionals\"/>\r\n## 条件判断（Conditionals）\r\n\r\n用 `unless` 来代替 `if` 的否定情况。\r\n\r\n不要用 `unless...else`， 而用 `if...else`:\r\n\r\n```coffeescript\r\n  # 好\r\n  if true\r\n    ...\r\n  else\r\n    ...\r\n\r\n  # 差\r\n  unless false\r\n    ...\r\n  else\r\n    ...\r\n```\r\n\r\n多行的 if/else 语句应该缩进：\r\n\r\n```coffeescript\r\n  # 好\r\n  if true\r\n    ...\r\n  else\r\n    ...\r\n\r\n  # 差\r\n  if true then ...\r\n  else ...\r\n```\r\n\r\n<a name=\"looping_and_comprehensions\"/>\r\n## 循环和列表解析（Looping and Comprehensions）\r\n\r\n尽可能的使用列表解析：\r\n\r\n```coffeescript\r\n  # 好\r\n  result = (item.name for item in array)\r\n\r\n  # 差\r\n  results = []\r\n  for item in array\r\n    results.push item.name\r\n```\r\n\r\n还可以过滤结果：\r\n\r\n```coffeescript\r\nresult = (item for item in array when item.name is \"test\")\r\n```\r\n\r\n遍历对象的键值：\r\n\r\n```coffeescript\r\nobject = one: 1, two: 2\r\nalert(\"#{key} = #{value}\") for key, value of object\r\n```\r\n\r\n<a name=\"extending_native_objects\"/>\r\n## 扩展本地对象（Extending Native Objects）\r\n\r\n不要修改本地对象。\r\n\r\n比如，不要给 `Array.prototype` 引入 `Array#forEach` 。\r\n\r\n<a name=\"exceptions\"/>\r\n## 异常（Exceptions）\r\n\r\n不要抑制异常抛出。\r\n\r\n<a name=\"annotations\"/>\r\n## 注解（Annotations）\r\n\r\n必要的时候应该写注解，来指明接下来的代码块具体将干什么。\r\n\r\n注解应紧贴在被描述代码的上一行。\r\n\r\n注解关键字后面应该跟一个冒号加一个空格，加一个描述性的注释。\r\n\r\n```coffeescript\r\n  # FIXME: The client's current state should *not* affect payload processing.\r\n  resetClientState()\r\n  processPayload()\r\n```\r\n\r\n如果注解不止一行，则下一行缩进两个空格。\r\n\r\n```coffeescript\r\n  # TODO: Ensure that the value returned by this call falls within a certain\r\n  #   range, or throw an exception.\r\n  analyze()\r\n```\r\n\r\n注解有以下几类：\r\n\r\n- `TODO`: 描述缺失的功能，以便日后加入\r\n- `FIXME`: 描述需要修复的代码\r\n- `OPTIMIZE`: 描述性能低下，或难以优化的代码\r\n- `HACK`: 描述一段值得质疑（或很巧妙）的代码\r\n- `REVIEW`: 描述需要确认其编码意图是否正确的代码\r\n\r\n如果你必须自定义一个新的注解类型，则应该把这个注解类型记录在项目的 README 里面。\r\n\r\n<a name=\"miscellaneous\"/>\r\n## 其他（Miscellaneous）\r\n\r\n`and` 更优于 `&&`.\r\n\r\n`or` 更优于 `||`.\r\n\r\n`is` 更优于 `==`.\r\n\r\n`not` 更优于 `!`.\r\n\r\n`or=` 应在可能的情况下使用：\r\n\r\n```coffeescript\r\ntemp or= {} # 好\r\ntemp = temp || {} # 差\r\n```\r\n\r\n最好用 (`::`) 访问对象的原型：\r\n\r\n```coffeescript\r\nArray::slice # 好\r\nArray.prototype.slice # 差\r\n```\r\n\r\n最好用 `@property` 而不是 `this.property`.\r\n\r\n```coffeescript\r\nreturn @property # 好\r\nreturn this.property # 差\r\n```\r\n\r\n但是，避免使用 **单独的** `@`:\r\n\r\n```coffeescript\r\nreturn this # 好\r\nreturn @ # 差\r\n```\r\n\r\n没有返回值的时候避免使用 `return` ，其他情况则需要显示 return 。\r\n\r\n当函数需要接收可变数量的参数时，使用 splats  (`...`)。\r\n\r\n```coffeescript\r\nconsole.log args... # 好\r\n\r\n(a, b, c, rest...) -> # 好\r\n```\r\n\r\n[coffeescript]: http://jashkenas.github.com/coffee-script/\r\n[coffeescript-issue-425]: https://github.com/jashkenas/coffee-script/issues/425\r\n[spine-js]: http://spinejs.com/\r\n[spine-js-code-review]: https://gist.github.com/1005723\r\n[pep8]: http://www.python.org/dev/peps/pep-0008/\r\n[ruby-style-guide]: https://github.com/bbatsov/ruby-style-guide\r\n[google-js-styleguide]: http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml\r\n[common-coffeescript-idioms]: http://arcturo.github.com/library/coffeescript/04_idioms.html\r\n[coffeescript-specific-style-guide]: http://awardwinningfjords.com/2011/05/13/coffeescript-specific-style-guide.html\r\n[coffeescript-faq]: https://github.com/jashkenas/coffee-script/wiki/FAQ\r\n[camel-case-variations]: http://en.wikipedia.org/wiki/CamelCase#Variations_and_synonyms\r\n","google":"46481966","note":"Don't delete this file! It's used internally to help with page regeneration."}